// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/dropbox/dropbox-sdk-go-unofficial/dropbox/files/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	async "github.com/dropbox/dropbox-sdk-go-unofficial/dropbox/async"
	file_properties "github.com/dropbox/dropbox-sdk-go-unofficial/dropbox/file_properties"
	files "github.com/dropbox/dropbox-sdk-go-unofficial/dropbox/files"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockDropbox is a mock of Client interface
type MockDropbox struct {
	ctrl     *gomock.Controller
	recorder *MockDropboxMockRecorder
}

// MockDropboxMockRecorder is the mock recorder for MockDropbox
type MockDropboxMockRecorder struct {
	mock *MockDropbox
}

// NewMockDropbox creates a new mock instance
func NewMockDropbox(ctrl *gomock.Controller) *MockDropbox {
	mock := &MockDropbox{ctrl: ctrl}
	mock.recorder = &MockDropboxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDropbox) EXPECT() *MockDropboxMockRecorder {
	return m.recorder
}

// AlphaGetMetadata mocks base method
func (m *MockDropbox) AlphaGetMetadata(arg *files.AlphaGetMetadataArg) (files.IsMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlphaGetMetadata", arg)
	ret0, _ := ret[0].(files.IsMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlphaGetMetadata indicates an expected call of AlphaGetMetadata
func (mr *MockDropboxMockRecorder) AlphaGetMetadata(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlphaGetMetadata", reflect.TypeOf((*MockDropbox)(nil).AlphaGetMetadata), arg)
}

// AlphaUpload mocks base method
func (m *MockDropbox) AlphaUpload(arg *files.CommitInfoWithProperties, content io.Reader) (*files.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlphaUpload", arg, content)
	ret0, _ := ret[0].(*files.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlphaUpload indicates an expected call of AlphaUpload
func (mr *MockDropboxMockRecorder) AlphaUpload(arg, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlphaUpload", reflect.TypeOf((*MockDropbox)(nil).AlphaUpload), arg, content)
}

// CopyV2 mocks base method
func (m *MockDropbox) CopyV2(arg *files.RelocationArg) (*files.RelocationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyV2", arg)
	ret0, _ := ret[0].(*files.RelocationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyV2 indicates an expected call of CopyV2
func (mr *MockDropboxMockRecorder) CopyV2(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyV2", reflect.TypeOf((*MockDropbox)(nil).CopyV2), arg)
}

// Copy mocks base method
func (m *MockDropbox) Copy(arg *files.RelocationArg) (files.IsMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", arg)
	ret0, _ := ret[0].(files.IsMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy
func (mr *MockDropboxMockRecorder) Copy(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockDropbox)(nil).Copy), arg)
}

// CopyBatchV2 mocks base method
func (m *MockDropbox) CopyBatchV2(arg *files.RelocationBatchArgBase) (*files.RelocationBatchV2Launch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyBatchV2", arg)
	ret0, _ := ret[0].(*files.RelocationBatchV2Launch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyBatchV2 indicates an expected call of CopyBatchV2
func (mr *MockDropboxMockRecorder) CopyBatchV2(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBatchV2", reflect.TypeOf((*MockDropbox)(nil).CopyBatchV2), arg)
}

// CopyBatch mocks base method
func (m *MockDropbox) CopyBatch(arg *files.RelocationBatchArg) (*files.RelocationBatchLaunch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyBatch", arg)
	ret0, _ := ret[0].(*files.RelocationBatchLaunch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyBatch indicates an expected call of CopyBatch
func (mr *MockDropboxMockRecorder) CopyBatch(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBatch", reflect.TypeOf((*MockDropbox)(nil).CopyBatch), arg)
}

// CopyBatchCheckV2 mocks base method
func (m *MockDropbox) CopyBatchCheckV2(arg *async.PollArg) (*files.RelocationBatchV2JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyBatchCheckV2", arg)
	ret0, _ := ret[0].(*files.RelocationBatchV2JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyBatchCheckV2 indicates an expected call of CopyBatchCheckV2
func (mr *MockDropboxMockRecorder) CopyBatchCheckV2(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBatchCheckV2", reflect.TypeOf((*MockDropbox)(nil).CopyBatchCheckV2), arg)
}

// CopyBatchCheck mocks base method
func (m *MockDropbox) CopyBatchCheck(arg *async.PollArg) (*files.RelocationBatchJobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyBatchCheck", arg)
	ret0, _ := ret[0].(*files.RelocationBatchJobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyBatchCheck indicates an expected call of CopyBatchCheck
func (mr *MockDropboxMockRecorder) CopyBatchCheck(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBatchCheck", reflect.TypeOf((*MockDropbox)(nil).CopyBatchCheck), arg)
}

// CopyReferenceGet mocks base method
func (m *MockDropbox) CopyReferenceGet(arg *files.GetCopyReferenceArg) (*files.GetCopyReferenceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyReferenceGet", arg)
	ret0, _ := ret[0].(*files.GetCopyReferenceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyReferenceGet indicates an expected call of CopyReferenceGet
func (mr *MockDropboxMockRecorder) CopyReferenceGet(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyReferenceGet", reflect.TypeOf((*MockDropbox)(nil).CopyReferenceGet), arg)
}

// CopyReferenceSave mocks base method
func (m *MockDropbox) CopyReferenceSave(arg *files.SaveCopyReferenceArg) (*files.SaveCopyReferenceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyReferenceSave", arg)
	ret0, _ := ret[0].(*files.SaveCopyReferenceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyReferenceSave indicates an expected call of CopyReferenceSave
func (mr *MockDropboxMockRecorder) CopyReferenceSave(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyReferenceSave", reflect.TypeOf((*MockDropbox)(nil).CopyReferenceSave), arg)
}

// CreateFolderV2 mocks base method
func (m *MockDropbox) CreateFolderV2(arg *files.CreateFolderArg) (*files.CreateFolderResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolderV2", arg)
	ret0, _ := ret[0].(*files.CreateFolderResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolderV2 indicates an expected call of CreateFolderV2
func (mr *MockDropboxMockRecorder) CreateFolderV2(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolderV2", reflect.TypeOf((*MockDropbox)(nil).CreateFolderV2), arg)
}

// CreateFolder mocks base method
func (m *MockDropbox) CreateFolder(arg *files.CreateFolderArg) (*files.FolderMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolder", arg)
	ret0, _ := ret[0].(*files.FolderMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder
func (mr *MockDropboxMockRecorder) CreateFolder(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockDropbox)(nil).CreateFolder), arg)
}

// CreateFolderBatch mocks base method
func (m *MockDropbox) CreateFolderBatch(arg *files.CreateFolderBatchArg) (*files.CreateFolderBatchLaunch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolderBatch", arg)
	ret0, _ := ret[0].(*files.CreateFolderBatchLaunch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolderBatch indicates an expected call of CreateFolderBatch
func (mr *MockDropboxMockRecorder) CreateFolderBatch(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolderBatch", reflect.TypeOf((*MockDropbox)(nil).CreateFolderBatch), arg)
}

// CreateFolderBatchCheck mocks base method
func (m *MockDropbox) CreateFolderBatchCheck(arg *async.PollArg) (*files.CreateFolderBatchJobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFolderBatchCheck", arg)
	ret0, _ := ret[0].(*files.CreateFolderBatchJobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolderBatchCheck indicates an expected call of CreateFolderBatchCheck
func (mr *MockDropboxMockRecorder) CreateFolderBatchCheck(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolderBatchCheck", reflect.TypeOf((*MockDropbox)(nil).CreateFolderBatchCheck), arg)
}

// DeleteV2 mocks base method
func (m *MockDropbox) DeleteV2(arg *files.DeleteArg) (*files.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteV2", arg)
	ret0, _ := ret[0].(*files.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteV2 indicates an expected call of DeleteV2
func (mr *MockDropboxMockRecorder) DeleteV2(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteV2", reflect.TypeOf((*MockDropbox)(nil).DeleteV2), arg)
}

// Delete mocks base method
func (m *MockDropbox) Delete(arg *files.DeleteArg) (files.IsMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg)
	ret0, _ := ret[0].(files.IsMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockDropboxMockRecorder) Delete(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDropbox)(nil).Delete), arg)
}

// DeleteBatch mocks base method
func (m *MockDropbox) DeleteBatch(arg *files.DeleteBatchArg) (*files.DeleteBatchLaunch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", arg)
	ret0, _ := ret[0].(*files.DeleteBatchLaunch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBatch indicates an expected call of DeleteBatch
func (mr *MockDropboxMockRecorder) DeleteBatch(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockDropbox)(nil).DeleteBatch), arg)
}

// DeleteBatchCheck mocks base method
func (m *MockDropbox) DeleteBatchCheck(arg *async.PollArg) (*files.DeleteBatchJobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatchCheck", arg)
	ret0, _ := ret[0].(*files.DeleteBatchJobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBatchCheck indicates an expected call of DeleteBatchCheck
func (mr *MockDropboxMockRecorder) DeleteBatchCheck(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatchCheck", reflect.TypeOf((*MockDropbox)(nil).DeleteBatchCheck), arg)
}

// Download mocks base method
func (m *MockDropbox) Download(arg *files.DownloadArg) (*files.FileMetadata, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg)
	ret0, _ := ret[0].(*files.FileMetadata)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Download indicates an expected call of Download
func (mr *MockDropboxMockRecorder) Download(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDropbox)(nil).Download), arg)
}

// DownloadZip mocks base method
func (m *MockDropbox) DownloadZip(arg *files.DownloadZipArg) (*files.DownloadZipResult, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadZip", arg)
	ret0, _ := ret[0].(*files.DownloadZipResult)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadZip indicates an expected call of DownloadZip
func (mr *MockDropboxMockRecorder) DownloadZip(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadZip", reflect.TypeOf((*MockDropbox)(nil).DownloadZip), arg)
}

// Export mocks base method
func (m *MockDropbox) Export(arg *files.ExportArg) (*files.ExportResult, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", arg)
	ret0, _ := ret[0].(*files.ExportResult)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Export indicates an expected call of Export
func (mr *MockDropboxMockRecorder) Export(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockDropbox)(nil).Export), arg)
}

// GetMetadata mocks base method
func (m *MockDropbox) GetMetadata(arg *files.GetMetadataArg) (files.IsMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg)
	ret0, _ := ret[0].(files.IsMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockDropboxMockRecorder) GetMetadata(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockDropbox)(nil).GetMetadata), arg)
}

// GetPreview mocks base method
func (m *MockDropbox) GetPreview(arg *files.PreviewArg) (*files.FileMetadata, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreview", arg)
	ret0, _ := ret[0].(*files.FileMetadata)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPreview indicates an expected call of GetPreview
func (mr *MockDropboxMockRecorder) GetPreview(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreview", reflect.TypeOf((*MockDropbox)(nil).GetPreview), arg)
}

// GetTemporaryLink mocks base method
func (m *MockDropbox) GetTemporaryLink(arg *files.GetTemporaryLinkArg) (*files.GetTemporaryLinkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemporaryLink", arg)
	ret0, _ := ret[0].(*files.GetTemporaryLinkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemporaryLink indicates an expected call of GetTemporaryLink
func (mr *MockDropboxMockRecorder) GetTemporaryLink(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryLink", reflect.TypeOf((*MockDropbox)(nil).GetTemporaryLink), arg)
}

// GetTemporaryUploadLink mocks base method
func (m *MockDropbox) GetTemporaryUploadLink(arg *files.GetTemporaryUploadLinkArg) (*files.GetTemporaryUploadLinkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemporaryUploadLink", arg)
	ret0, _ := ret[0].(*files.GetTemporaryUploadLinkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemporaryUploadLink indicates an expected call of GetTemporaryUploadLink
func (mr *MockDropboxMockRecorder) GetTemporaryUploadLink(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryUploadLink", reflect.TypeOf((*MockDropbox)(nil).GetTemporaryUploadLink), arg)
}

// GetThumbnail mocks base method
func (m *MockDropbox) GetThumbnail(arg *files.ThumbnailArg) (*files.FileMetadata, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThumbnail", arg)
	ret0, _ := ret[0].(*files.FileMetadata)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetThumbnail indicates an expected call of GetThumbnail
func (mr *MockDropboxMockRecorder) GetThumbnail(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThumbnail", reflect.TypeOf((*MockDropbox)(nil).GetThumbnail), arg)
}

// GetThumbnailBatch mocks base method
func (m *MockDropbox) GetThumbnailBatch(arg *files.GetThumbnailBatchArg) (*files.GetThumbnailBatchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThumbnailBatch", arg)
	ret0, _ := ret[0].(*files.GetThumbnailBatchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThumbnailBatch indicates an expected call of GetThumbnailBatch
func (mr *MockDropboxMockRecorder) GetThumbnailBatch(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThumbnailBatch", reflect.TypeOf((*MockDropbox)(nil).GetThumbnailBatch), arg)
}

// ListFolder mocks base method
func (m *MockDropbox) ListFolder(arg *files.ListFolderArg) (*files.ListFolderResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolder", arg)
	ret0, _ := ret[0].(*files.ListFolderResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolder indicates an expected call of ListFolder
func (mr *MockDropboxMockRecorder) ListFolder(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolder", reflect.TypeOf((*MockDropbox)(nil).ListFolder), arg)
}

// ListFolderContinue mocks base method
func (m *MockDropbox) ListFolderContinue(arg *files.ListFolderContinueArg) (*files.ListFolderResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolderContinue", arg)
	ret0, _ := ret[0].(*files.ListFolderResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolderContinue indicates an expected call of ListFolderContinue
func (mr *MockDropboxMockRecorder) ListFolderContinue(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolderContinue", reflect.TypeOf((*MockDropbox)(nil).ListFolderContinue), arg)
}

// ListFolderGetLatestCursor mocks base method
func (m *MockDropbox) ListFolderGetLatestCursor(arg *files.ListFolderArg) (*files.ListFolderGetLatestCursorResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolderGetLatestCursor", arg)
	ret0, _ := ret[0].(*files.ListFolderGetLatestCursorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolderGetLatestCursor indicates an expected call of ListFolderGetLatestCursor
func (mr *MockDropboxMockRecorder) ListFolderGetLatestCursor(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolderGetLatestCursor", reflect.TypeOf((*MockDropbox)(nil).ListFolderGetLatestCursor), arg)
}

// ListFolderLongpoll mocks base method
func (m *MockDropbox) ListFolderLongpoll(arg *files.ListFolderLongpollArg) (*files.ListFolderLongpollResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFolderLongpoll", arg)
	ret0, _ := ret[0].(*files.ListFolderLongpollResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFolderLongpoll indicates an expected call of ListFolderLongpoll
func (mr *MockDropboxMockRecorder) ListFolderLongpoll(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFolderLongpoll", reflect.TypeOf((*MockDropbox)(nil).ListFolderLongpoll), arg)
}

// ListRevisions mocks base method
func (m *MockDropbox) ListRevisions(arg *files.ListRevisionsArg) (*files.ListRevisionsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRevisions", arg)
	ret0, _ := ret[0].(*files.ListRevisionsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRevisions indicates an expected call of ListRevisions
func (mr *MockDropboxMockRecorder) ListRevisions(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRevisions", reflect.TypeOf((*MockDropbox)(nil).ListRevisions), arg)
}

// MoveV2 mocks base method
func (m *MockDropbox) MoveV2(arg *files.RelocationArg) (*files.RelocationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveV2", arg)
	ret0, _ := ret[0].(*files.RelocationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveV2 indicates an expected call of MoveV2
func (mr *MockDropboxMockRecorder) MoveV2(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveV2", reflect.TypeOf((*MockDropbox)(nil).MoveV2), arg)
}

// Move mocks base method
func (m *MockDropbox) Move(arg *files.RelocationArg) (files.IsMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", arg)
	ret0, _ := ret[0].(files.IsMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Move indicates an expected call of Move
func (mr *MockDropboxMockRecorder) Move(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockDropbox)(nil).Move), arg)
}

// MoveBatchV2 mocks base method
func (m *MockDropbox) MoveBatchV2(arg *files.MoveBatchArg) (*files.RelocationBatchV2Launch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveBatchV2", arg)
	ret0, _ := ret[0].(*files.RelocationBatchV2Launch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveBatchV2 indicates an expected call of MoveBatchV2
func (mr *MockDropboxMockRecorder) MoveBatchV2(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveBatchV2", reflect.TypeOf((*MockDropbox)(nil).MoveBatchV2), arg)
}

// MoveBatch mocks base method
func (m *MockDropbox) MoveBatch(arg *files.RelocationBatchArg) (*files.RelocationBatchLaunch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveBatch", arg)
	ret0, _ := ret[0].(*files.RelocationBatchLaunch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveBatch indicates an expected call of MoveBatch
func (mr *MockDropboxMockRecorder) MoveBatch(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveBatch", reflect.TypeOf((*MockDropbox)(nil).MoveBatch), arg)
}

// MoveBatchCheckV2 mocks base method
func (m *MockDropbox) MoveBatchCheckV2(arg *async.PollArg) (*files.RelocationBatchV2JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveBatchCheckV2", arg)
	ret0, _ := ret[0].(*files.RelocationBatchV2JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveBatchCheckV2 indicates an expected call of MoveBatchCheckV2
func (mr *MockDropboxMockRecorder) MoveBatchCheckV2(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveBatchCheckV2", reflect.TypeOf((*MockDropbox)(nil).MoveBatchCheckV2), arg)
}

// MoveBatchCheck mocks base method
func (m *MockDropbox) MoveBatchCheck(arg *async.PollArg) (*files.RelocationBatchJobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveBatchCheck", arg)
	ret0, _ := ret[0].(*files.RelocationBatchJobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveBatchCheck indicates an expected call of MoveBatchCheck
func (mr *MockDropboxMockRecorder) MoveBatchCheck(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveBatchCheck", reflect.TypeOf((*MockDropbox)(nil).MoveBatchCheck), arg)
}

// PermanentlyDelete mocks base method
func (m *MockDropbox) PermanentlyDelete(arg *files.DeleteArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PermanentlyDelete", arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PermanentlyDelete indicates an expected call of PermanentlyDelete
func (mr *MockDropboxMockRecorder) PermanentlyDelete(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PermanentlyDelete", reflect.TypeOf((*MockDropbox)(nil).PermanentlyDelete), arg)
}

// PropertiesAdd mocks base method
func (m *MockDropbox) PropertiesAdd(arg *file_properties.AddPropertiesArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesAdd", arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PropertiesAdd indicates an expected call of PropertiesAdd
func (mr *MockDropboxMockRecorder) PropertiesAdd(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesAdd", reflect.TypeOf((*MockDropbox)(nil).PropertiesAdd), arg)
}

// PropertiesOverwrite mocks base method
func (m *MockDropbox) PropertiesOverwrite(arg *file_properties.OverwritePropertyGroupArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesOverwrite", arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PropertiesOverwrite indicates an expected call of PropertiesOverwrite
func (mr *MockDropboxMockRecorder) PropertiesOverwrite(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesOverwrite", reflect.TypeOf((*MockDropbox)(nil).PropertiesOverwrite), arg)
}

// PropertiesRemove mocks base method
func (m *MockDropbox) PropertiesRemove(arg *file_properties.RemovePropertiesArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesRemove", arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PropertiesRemove indicates an expected call of PropertiesRemove
func (mr *MockDropboxMockRecorder) PropertiesRemove(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesRemove", reflect.TypeOf((*MockDropbox)(nil).PropertiesRemove), arg)
}

// PropertiesTemplateGet mocks base method
func (m *MockDropbox) PropertiesTemplateGet(arg *file_properties.GetTemplateArg) (*file_properties.GetTemplateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesTemplateGet", arg)
	ret0, _ := ret[0].(*file_properties.GetTemplateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesTemplateGet indicates an expected call of PropertiesTemplateGet
func (mr *MockDropboxMockRecorder) PropertiesTemplateGet(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesTemplateGet", reflect.TypeOf((*MockDropbox)(nil).PropertiesTemplateGet), arg)
}

// PropertiesTemplateList mocks base method
func (m *MockDropbox) PropertiesTemplateList() (*file_properties.ListTemplateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesTemplateList")
	ret0, _ := ret[0].(*file_properties.ListTemplateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PropertiesTemplateList indicates an expected call of PropertiesTemplateList
func (mr *MockDropboxMockRecorder) PropertiesTemplateList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesTemplateList", reflect.TypeOf((*MockDropbox)(nil).PropertiesTemplateList))
}

// PropertiesUpdate mocks base method
func (m *MockDropbox) PropertiesUpdate(arg *file_properties.UpdatePropertiesArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PropertiesUpdate", arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// PropertiesUpdate indicates an expected call of PropertiesUpdate
func (mr *MockDropboxMockRecorder) PropertiesUpdate(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PropertiesUpdate", reflect.TypeOf((*MockDropbox)(nil).PropertiesUpdate), arg)
}

// Restore mocks base method
func (m *MockDropbox) Restore(arg *files.RestoreArg) (*files.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", arg)
	ret0, _ := ret[0].(*files.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore
func (mr *MockDropboxMockRecorder) Restore(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockDropbox)(nil).Restore), arg)
}

// SaveUrl mocks base method
func (m *MockDropbox) SaveUrl(arg *files.SaveUrlArg) (*files.SaveUrlResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUrl", arg)
	ret0, _ := ret[0].(*files.SaveUrlResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUrl indicates an expected call of SaveUrl
func (mr *MockDropboxMockRecorder) SaveUrl(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUrl", reflect.TypeOf((*MockDropbox)(nil).SaveUrl), arg)
}

// SaveUrlCheckJobStatus mocks base method
func (m *MockDropbox) SaveUrlCheckJobStatus(arg *async.PollArg) (*files.SaveUrlJobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUrlCheckJobStatus", arg)
	ret0, _ := ret[0].(*files.SaveUrlJobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUrlCheckJobStatus indicates an expected call of SaveUrlCheckJobStatus
func (mr *MockDropboxMockRecorder) SaveUrlCheckJobStatus(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUrlCheckJobStatus", reflect.TypeOf((*MockDropbox)(nil).SaveUrlCheckJobStatus), arg)
}

// Search mocks base method
func (m *MockDropbox) Search(arg *files.SearchArg) (*files.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg)
	ret0, _ := ret[0].(*files.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockDropboxMockRecorder) Search(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockDropbox)(nil).Search), arg)
}

// Upload mocks base method
func (m *MockDropbox) Upload(arg *files.CommitInfo, content io.Reader) (*files.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg, content)
	ret0, _ := ret[0].(*files.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockDropboxMockRecorder) Upload(arg, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockDropbox)(nil).Upload), arg, content)
}

// UploadSessionAppendV2 mocks base method
func (m *MockDropbox) UploadSessionAppendV2(arg *files.UploadSessionAppendArg, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSessionAppendV2", arg, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadSessionAppendV2 indicates an expected call of UploadSessionAppendV2
func (mr *MockDropboxMockRecorder) UploadSessionAppendV2(arg, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSessionAppendV2", reflect.TypeOf((*MockDropbox)(nil).UploadSessionAppendV2), arg, content)
}

// UploadSessionAppend mocks base method
func (m *MockDropbox) UploadSessionAppend(arg *files.UploadSessionCursor, content io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSessionAppend", arg, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadSessionAppend indicates an expected call of UploadSessionAppend
func (mr *MockDropboxMockRecorder) UploadSessionAppend(arg, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSessionAppend", reflect.TypeOf((*MockDropbox)(nil).UploadSessionAppend), arg, content)
}

// UploadSessionFinish mocks base method
func (m *MockDropbox) UploadSessionFinish(arg *files.UploadSessionFinishArg, content io.Reader) (*files.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSessionFinish", arg, content)
	ret0, _ := ret[0].(*files.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSessionFinish indicates an expected call of UploadSessionFinish
func (mr *MockDropboxMockRecorder) UploadSessionFinish(arg, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSessionFinish", reflect.TypeOf((*MockDropbox)(nil).UploadSessionFinish), arg, content)
}

// UploadSessionFinishBatch mocks base method
func (m *MockDropbox) UploadSessionFinishBatch(arg *files.UploadSessionFinishBatchArg) (*files.UploadSessionFinishBatchLaunch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSessionFinishBatch", arg)
	ret0, _ := ret[0].(*files.UploadSessionFinishBatchLaunch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSessionFinishBatch indicates an expected call of UploadSessionFinishBatch
func (mr *MockDropboxMockRecorder) UploadSessionFinishBatch(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSessionFinishBatch", reflect.TypeOf((*MockDropbox)(nil).UploadSessionFinishBatch), arg)
}

// UploadSessionFinishBatchCheck mocks base method
func (m *MockDropbox) UploadSessionFinishBatchCheck(arg *async.PollArg) (*files.UploadSessionFinishBatchJobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSessionFinishBatchCheck", arg)
	ret0, _ := ret[0].(*files.UploadSessionFinishBatchJobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSessionFinishBatchCheck indicates an expected call of UploadSessionFinishBatchCheck
func (mr *MockDropboxMockRecorder) UploadSessionFinishBatchCheck(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSessionFinishBatchCheck", reflect.TypeOf((*MockDropbox)(nil).UploadSessionFinishBatchCheck), arg)
}

// UploadSessionStart mocks base method
func (m *MockDropbox) UploadSessionStart(arg *files.UploadSessionStartArg, content io.Reader) (*files.UploadSessionStartResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadSessionStart", arg, content)
	ret0, _ := ret[0].(*files.UploadSessionStartResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSessionStart indicates an expected call of UploadSessionStart
func (mr *MockDropboxMockRecorder) UploadSessionStart(arg, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSessionStart", reflect.TypeOf((*MockDropbox)(nil).UploadSessionStart), arg, content)
}
